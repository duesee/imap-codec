name: Build & Test

on:
  push:
    branches: [ main ]
    paths:
      - '**.rs'
      - '**.toml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**.rs'
      - '**.toml'
      - '.github/workflows/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  Test:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Setup | Install toolchain
        uses: actions-rs/toolchain@88dc2356392166efad76775c878094f4e83ff746
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Setup | Install toolchain
        uses: actions-rs/toolchain@88dc2356392166efad76775c878094f4e83ff746
        with:
          profile: minimal
          toolchain: nightly
          override: false

      - name: Setup | Install cargo-fuzz
        run: |
          cargo install cargo-fuzz

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check everything
        run: |
          cargo check --workspace --all-targets
          cargo check --workspace --all-targets --all-features

      - name: Build everything
        if: matrix.os != 'windows-latest'
        run: |
          cargo build --workspace --all-targets
          cargo build --workspace --all-targets --all-features

      # TODO: error: linking with `link.exe` failed: exit code: 1561
      - name: Build everything (w/o fuzzing)
        if: matrix.os == 'windows-latest'
        run: |
          cargo build --workspace --all-targets --exclude imap-codec-fuzz --exclude imap-types-fuzz
          cargo build --workspace --all-targets --exclude imap-codec-fuzz --exclude imap-types-fuzz --all-features

      - name: Test everything (w/o fuzzing)
        run: |
          cargo test --workspace --doc
          cargo test --workspace --doc --all-features
          cargo test --workspace --exclude imap-codec-fuzz --exclude imap-types-fuzz --all-targets
          cargo test --workspace --exclude imap-codec-fuzz --exclude imap-types-fuzz --all-targets --all-features

      - name: Fuzzing (only on Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          for fuzz_target in greeting command response greeting_to_bytes_and_back command_to_bytes_and_back response_to_bytes_and_back;
          do
          echo "# ${fuzz_target}";
          cargo +nightly fuzz run --features=ext ${fuzz_target} -- -dict=fuzz/terminals.dict -max_len=256 -only_ascii=1 -runs=25000
          done

  Audit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Audit dependencies
        uses: EmbarkStudios/cargo-deny-action@7257a18a9c2fe3f92b85d41ae473520dff953c97

  Clippy:
    runs-on: ubuntu-latest

    steps:
      - name: Install toolchain
        uses: actions-rs/toolchain@88dc2356392166efad76775c878094f4e83ff746
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for common mistakes and missed improvements
        uses: actions-rs/clippy-check@b5b5f21f4797c02da247df37026fcd0a5024aa4d
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  Formatting:
    runs-on: ubuntu-latest

    steps:
      - name: Install nightly toolchain
        uses: actions-rs/toolchain@88dc2356392166efad76775c878094f4e83ff746
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check code formatting
        run: cargo +nightly fmt --check
